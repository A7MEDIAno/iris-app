generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Company (foretak/firma)
model Company {
  id               String   @id @default(cuid())
  name             String
  orgNumber        String   @unique
  subdomain        String   @unique
  
  // Abonnement
  subscriptionTier String   @default("STANDARD")
  storageUsedGB    Float    @default(0)
  
  // White-label
  whitelabelTier   String?
  whitelabelConfig Json?
  
  // Relasjoner
  users            User[]
  customers        Customer[]
  products         Product[]
  orders           Order[]
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

// User (brukere - admin, fotograf, etc)
model User {
  id              String   @id @default(cuid())
  email           String   @unique
  name            String
  phone           String?
  password        String
  role            UserRole @default(PHOTOGRAPHER)
  
  company         Company  @relation(fields: [companyId], references: [id])
  companyId       String
  
  // For kj√∏replanlegging
  baseAddress     String?
  
  // Relasjoner
  assignedOrders  Order[]  @relation("AssignedPhotographer")
  createdOrders   Order[]  @relation("CreatedBy")
  uploadedImages  Image[]  @relation("UploadedImages")
  editedImages    Image[]  @relation("EditedImages")
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

enum UserRole {
  ADMIN
  PHOTOGRAPHER
  EDITOR
}

// Customer (meglerfirmaer)
model Customer {
  id            String   @id @default(cuid())
  name          String
  orgNumber     String?
  email         String   
  phone         String?
  invoiceEmail  String?
  
  company       Company  @relation(fields: [companyId], references: [id])
  companyId     String
  
  orders        Order[]
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// Product (tjenester)
model Product {
  id              String   @id @default(cuid())
  name            String
  description     String?
  sku             String?
  
  // Prising
  priceExVat      Decimal
  vatRate         Decimal  @default(25)
  
  // Kostnader
  pke             Decimal  @default(0) // Produksjonskostnad Ekstern
  pki             Decimal  @default(0) // Produksjonskostnad Intern
  photographerFee Decimal  @default(0)
  
  company         Company  @relation(fields: [companyId], references: [id])
  companyId       String
  
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

// Order (oppdrag)
model Order {
  id              String      @id @default(cuid())
  orderNumber     Int         @default(autoincrement())
  
  // Status
  status          OrderStatus @default(PENDING)
  priority        Priority    @default(NORMAL)
  
  // Relasjoner
  customer        Customer    @relation(fields: [customerId], references: [id])
  customerId      String
  
  photographer    User?       @relation("AssignedPhotographer", fields: [photographerId], references: [id])
  photographerId  String?
  
  createdBy       User        @relation("CreatedBy", fields: [createdById], references: [id])
  createdById     String
  
  company         Company     @relation(fields: [companyId], references: [id])
  companyId       String
  
  // Eiendomsinfo
  propertyAddress String
  propertyType    String?
  scheduledDate   DateTime
  
  // Bilder
  images          Image[]
  
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

// Image model
model Image {
  id            String      @id @default(cuid())
  orderId       String
  order         Order       @relation(fields: [orderId], references: [id], onDelete: Cascade)
  filename      String
  originalName  String
  url           String
  thumbnailUrl  String?
  size          Int
  mimeType      String
  width         Int?
  height        Int?
  uploadedBy    String
  photographer  User        @relation("UploadedImages", fields: [uploadedBy], references: [id])
  status        ImageStatus @default(UPLOADED)
  tags          ImageTag[]
  metadata      Json?
  editedUrl     String?
  editedBy      String?
  editor        User?       @relation("EditedImages", fields: [editedBy], references: [id])
  editedAt      DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([orderId])
  @@index([status])
}

// Tag model
model Tag {
  id          String      @id @default(cuid())
  name        String      @unique
  category    String?
  icon        String?
  images      ImageTag[]
  createdAt   DateTime    @default(now())
}

// ImageTag junction table
model ImageTag {
  id        String   @id @default(cuid())
  imageId   String
  image     Image    @relation(fields: [imageId], references: [id], onDelete: Cascade)
  tagId     String
  tag       Tag      @relation(fields: [tagId], references: [id])
  
  @@unique([imageId, tagId])
  @@index([imageId])
  @@index([tagId])
}

// Enums
enum OrderStatus {
  PENDING
  ASSIGNED
  IN_PROGRESS
  EDITING
  QUALITY_CONTROL
  READY_FOR_DELIVERY
  DELIVERED
  COMPLETED
  CANCELLED
}

enum Priority {
  NORMAL
  HIGH
  URGENT
}

enum ImageStatus {
  UPLOADED
  PROCESSING
  READY_FOR_EDIT
  IN_EDITING
  EDITED
  APPROVED
  REJECTED
  DELIVERED
}