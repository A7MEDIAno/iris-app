generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Company (foretak/firma)
model Company {
  id               String   @id @default(cuid())
  name             String
  orgNumber        String   @unique
  subdomain        String   @unique
  
  // Abonnement
  subscriptionTier String   @default("STANDARD")
  storageUsedGB    Float    @default(0)
  
  // White-label
  whitelabelTier   String?
  whitelabelConfig Json?
  
  // Relasjoner
  users            User[]
  customers        Customer[]
  products         Product[]
  orders           Order[]
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

// User (brukere - admin, fotograf, etc)
model User {
  id              String   @id @default(cuid())
  email           String   @unique
  name            String
  phone           String?
  password        String
  role            UserRole @default(PHOTOGRAPHER)
  
  company         Company  @relation(fields: [companyId], references: [id])
  companyId       String
  
  // For kjøreplanlegging
  baseAddress     String?
  
  // Fotograf-spesifikk data
  availableFrom    DateTime?
  availableTo      DateTime?
  workingAreas     String[]  // Kommuner/områder
  equipment        String[]  // Kamerautstyr
  specialties      String[]  // Drone, twilight, etc
  hourlyRate       Decimal?
  calendarUrl      String?   // Google Calendar integration
  
  // Relasjoner
  assignedOrders  Order[]  @relation("AssignedPhotographer")
  createdOrders   Order[]  @relation("CreatedBy")
  uploadedImages  Image[]  @relation("UploadedImages")
  editedImages    Image[]  @relation("EditedImages")
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

enum UserRole {
  ADMIN
  PHOTOGRAPHER
  EDITOR
}

// Customer (meglerfirmaer)
model Customer {
  id            String   @id @default(cuid())
  name          String
  orgNumber     String?
  email         String   
  phone         String?
  
  // Fakturering
  invoiceEmail  String?
  invoiceAddress String?
  invoiceZip    String?
  invoiceCity   String?
  
  // Leveranseadresse (hvis annerledes)
  deliveryAddress String?
  deliveryZip     String?
  deliveryCity    String?
  
  // Kontaktpersoner
  contactPersons ContactPerson[]
  
  // Preferanser
  preferences   Json?    // Lagrer kunde-spesifikke preferanser
  notes         String?  // Interne notater
  
  // Status
  isActive      Boolean  @default(true)
  creditLimit   Decimal? @default(0)
  paymentTerms  Int      @default(14) // Betalingsbetingelser i dager
  
  company       Company  @relation(fields: [companyId], references: [id])
  companyId     String
  
  orders        Order[]
  invoices      Invoice[]
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@unique([companyId, email])
  @@unique([companyId, orgNumber])
  @@index([companyId, isActive])
}

model ContactPerson {
  id         String   @id @default(cuid())
  name       String
  email      String
  phone      String?
  role       String?  // e.g., "Daglig leder", "Markedsansvarlig"
  isPrimary  Boolean  @default(false)
  
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId String
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  @@index([customerId])
}

// Product (tjenester)
model Product {
  id              String   @id @default(cuid())
  name            String
  description     String?
  sku             String?
  category        String?
  sortOrder       Int      @default(0)
  
  // Prising
  priceExVat      Decimal
  vatRate         Decimal  @default(25)
  
  // Kostnader
  pke             Decimal  @default(0) // Produksjonskostnad Ekstern
  pki             Decimal  @default(0) // Produksjonskostnad Intern
  photographerFee Decimal  @default(0)
  
  company         Company  @relation(fields: [companyId], references: [id])
  companyId       String
  
  // Relasjoner
  orderProducts   OrderProduct[]
  
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([companyId, isActive, category])
}

// Order (oppdrag)
model Order {
  id              String      @id @default(cuid())
  orderNumber     Int         @default(autoincrement())
  
  // Status
  status          OrderStatus @default(PENDING)
  priority        Priority    @default(NORMAL)
  
  // Relasjoner
  customer        Customer    @relation(fields: [customerId], references: [id])
  customerId      String
  
  photographer    User?       @relation("AssignedPhotographer", fields: [photographerId], references: [id])
  photographerId  String?
  
  createdBy       User        @relation("CreatedBy", fields: [createdById], references: [id])
  createdById     String
  
  company         Company     @relation(fields: [companyId], references: [id])
  companyId       String
  
  // Eiendomsinfo
  propertyAddress String
  propertyType    String?
  scheduledDate   DateTime
  
  // Økonomi
  orderProducts   OrderProduct[]
  totalAmount     Decimal?
  vatAmount       Decimal?
  photographerFee Decimal?
  companyProfit   Decimal?
  
  // Bilder
  images          Image[]
  
  // Faktura
  invoice         Invoice?
  
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

// OrderProduct junction table
model OrderProduct {
  id              String   @id @default(cuid())
  
  order           Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId         String
  
  product         Product  @relation(fields: [productId], references: [id])
  productId       String
  
  quantity        Int      @default(1)
  unitPrice       Decimal  // Pris ved bestillingstidspunkt
  totalPrice      Decimal  // quantity * unitPrice
  
  createdAt       DateTime @default(now())
  
  @@unique([orderId, productId])
  @@index([orderId])
  @@index([productId])
}

// Invoice (faktura)
model Invoice {
  id            String   @id @default(cuid())
  invoiceNumber Int      @unique @default(autoincrement())
  
  order         Order    @relation(fields: [orderId], references: [id])
  orderId       String   @unique
  
  customer      Customer @relation(fields: [customerId], references: [id])
  customerId    String
  
  // Beløp
  subtotal      Decimal
  vatAmount     Decimal
  total         Decimal
  
  // Status
  status        String   @default("DRAFT") // DRAFT, SENT, PAID, OVERDUE, CANCELLED
  dueDate       DateTime
  sentAt        DateTime?
  paidDate      DateTime?
  
  // Fakturalinjer
  lines         InvoiceLine[]
  
  // Integrasjon
  externalId    String?  // Tripletex/Fiken ID
  pdfUrl        String?
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@index([status])
  @@index([customerId])
}

model InvoiceLine {
  id           String   @id @default(cuid())
  
  invoice      Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  invoiceId    String
  
  description  String
  quantity     Int
  unitPrice    Decimal
  totalPrice   Decimal
  vatRate      Decimal  @default(25)
  
  createdAt    DateTime @default(now())
  
  @@index([invoiceId])
}

// Image model
model Image {
  id            String      @id @default(cuid())
  orderId       String
  order         Order       @relation(fields: [orderId], references: [id], onDelete: Cascade)
  filename      String
  originalName  String
  url           String
  thumbnailUrl  String?
  size          Int
  mimeType      String
  width         Int?
  height        Int?
  uploadedBy    String
  photographer  User        @relation("UploadedImages", fields: [uploadedBy], references: [id])
  status        ImageStatus @default(UPLOADED)
  tags          ImageTag[]
  metadata      Json?
  editedUrl     String?
  editedBy      String?
  editor        User?       @relation("EditedImages", fields: [editedBy], references: [id])
  editedAt      DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([orderId])
  @@index([status])
}

// Tag model
model Tag {
  id          String      @id @default(cuid())
  name        String      @unique
  category    String?
  icon        String?
  images      ImageTag[]
  createdAt   DateTime    @default(now())
}

// ImageTag junction table
model ImageTag {
  id        String   @id @default(cuid())
  imageId   String
  image     Image    @relation(fields: [imageId], references: [id], onDelete: Cascade)
  tagId     String
  tag       Tag      @relation(fields: [tagId], references: [id])
  
  @@unique([imageId, tagId])
  @@index([imageId])
  @@index([tagId])
}

// Enums
enum OrderStatus {
  PENDING
  ASSIGNED
  IN_PROGRESS
  EDITING
  QUALITY_CONTROL
  READY_FOR_DELIVERY
  DELIVERED
  COMPLETED
  CANCELLED
}

enum Priority {
  NORMAL
  HIGH
  URGENT
}

enum ImageStatus {
  UPLOADED
  PROCESSING
  READY_FOR_EDIT
  IN_EDITING
  EDITED
  APPROVED
  REJECTED
  DELIVERED
}